// Generated by CoffeeScript 1.6.0
(function() {
  var $, google, load_options, picker_options;

  $ = this.jQuery;

  google = this.google;

  picker_options = this.lowtone_google_picker;

  $.fn.google_picker = function(method) {
    var defaults, methods, picker_callback;
    defaults = {};
    picker_callback = function(data, options) {
      var doc, success, url;
      if (google.picker.Action.PICKED === data[google.picker.Response.ACTION]) {
        doc = data[google.picker.Response.DOCUMENTS][0];
        url = doc[google.picker.Document.URL];
        data = {
          action: "lowtone_google_picker_" + options.picker_id,
          picker_id: options.picker_id,
          url: url
        };
        success = function(response) {
          if (!response.meta) {
            return;
          }
          switch (response.meta.code) {
            case 200:
              if (!response.data) {
                return;
              }
              return console.dir(response.data);
          }
        };
        return $.getJSON(picker_options.ajaxurl, data, success);
      }
    };
    methods = {
      init: function(options) {
        var $element;
        $element = $(this);
        options = $.extend(null, $element.data('picker' || {}), options);
        return $element.click(function() {
          return methods.open(options);
        });
      },
      open: function(options) {
        var add_view, instance_callback, picker, view, _i, _len, _ref;
        instance_callback = function(data) {
          return picker_callback(data, options);
        };
        options = $.extend(null, defaults, options);
        picker = new google.picker.PickerBuilder();
        add_view = function(view) {
          return picker.addView(google.picker.ViewId[view]);
        };
        _ref = options.views;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          add_view(view);
        }
        picker = picker.setCallback(instance_callback).build();
        return picker.setVisible(true);
      }
    };
    if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === "object" || !method) {
      return methods.init.apply(this, arguments);
    } else {
      return $.error("Method " + method + " does not exist on jQuery.picker");
    }
  };

  google.setOnLoadCallback(function() {
    return $(function() {
      return $('.lowtone.google.picker').google_picker();
    });
  });

  load_options = {
    language: picker_options.language
  };

  google.load('picker', '1', load_options);

}).call(this);
